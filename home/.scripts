#!/usr/bin/env bash

# Functions
_my_prompt() {
	async_init

	# cache variable
	typeset -Ag prompt_data

	# section for dir
	function prompt_dir() {
		echo '%F{blue}%0~%f'
	}

	# section for git branch
	function prompt_git() {
		cd -q $1
		getbranch
	}

	# refresh prompt with new data
	prompt_refresh() {
		PROMPT="$prompt_data[prompt_git]$prompt_data[prompt_dir] %(?..%F{red})\$ %f"
		# Redraw the prompt.
		zle && zle .reset-prompt
	}

	prompt_callback() {
		local job=$1 code=$2 output=$3 exec_time=$4
		prompt_data[$job]=$output
		prompt_refresh
	}

	# Start async worker
	async_start_worker 'prompt' -n
	# Register callback function for the workers completed jobs
	async_register_callback 'prompt' prompt_callback

	# start async jobs before cmd
	prompt_precmd() {
		async_job 'prompt' prompt_dir
		async_job 'prompt' prompt_git $PWD # required
	}

	# Setup
	zmodload zsh/zle
	autoload -Uz add-zsh-hook
	add-zsh-hook precmd prompt_precmd
}

# converter file mkv to mp4
mp4(){
	for i in *.mkv; do
		ffmpeg -i "$i" -codec copy "${i%.*}.mp4"
	done
}

# converter file mp4 to mkv
mkv(){
	for i in *.mp4; do
		ffmpeg -i "$i" -codec copy "${i%.*}.mkv"
	done
}

# Streamlink
tw(){
	clear && streamlink -p mpv "$@" best
}

# entering calculator mode
bindkey -s '^a' 'bc -l\n'

# you can put as many files do you want
ttm() {
for i in "$@"; do
    curl -F file=@$i http://ttm.sh
done
}

# you can put as many files do you want
0x0() {
for i in "$@"; do
    curl -F file=@$i http://0x0.st
done
}

envs() {
for i in "$@"; do
    curl -F file=@$i https://envs.sh/
done
}

pm() {
	pamixer --set-volume "$@"
}

# play video based on the clipboard
play() {
        mpv "$(wl-paste 2>/dev/null || xclip -o 2>/dev/null)"
}

# download file based on the clipboard
down() {
    mkdir $HOME/Franks/Dowloads
		clear && cd $HOME/Franks/Dowloads
		aria2c "$(wl-paste 2>/dev/null || xclip -o 2>/dev/null)"
}

# play audio based search
yplay() {
    mpv --input-ipc-server=/tmp/mpvcmd --ytdl-format=bestaudio ytdl://ytsearch:"$*"
}

# play music for programming
pg() {
    mpv --ytdl-format=bestaudio ytdl://ytsearch:"Música Chillstep para Programação / Cyber / CodificaçãO"
}

# bad music
bd(){
	 mpv --ytdl-format=bestaudio ytdl://ytsearch:"hometown xirali-3 1hour"
 }

br(){
	xrandr --output VGA-0 --brightness $@ && clear
}

pkginf() {
    clear && pacman -Si $@ | awk '/Name/{print "Package: " $3}/Version/{print "Version: " $3}/Installed Size/{printf "Size: %s %s\n", $4, $5}'
}

pkginf1() {
   clear && pacman -Q $@
}

mon(){
	clear && xrandr --output VGA-0 --mode "$@"
}

device() {
	adb tcpip 5555 && adb connect 192.168.0.101:5555
}

usage() {
    for p in "$@" ; do
        if pidof $p >/dev/null ; then
            RAM=$(echo $(ps -A --sort -rsz -o comm,rss | grep $p | sed -n 1p | sed 's/.* //g') / 1000 | bc)
            PRAM=$(ps -A --sort -rsz -o comm,pmem | grep $p | sed -n 1p | sed 's/.* //g')
            PCPU=$(ps -A --sort -rsz -o comm,pcpu | grep $p | sed -n 1p | sed 's/.* //g')
            echo "$p is using ${RAM}mb of RAM (${PRAM}%) and ${PCPU}% of CPU"
        else
            echo "$p is not running"
        fi
    done
}

aw() {
  search_term=$(echo $@ | sed 's/\ /+/g') 
  #lynx "https://wiki.archlinux.org/index.php?search="$search_term
  w3m "https://wiki.archlinux.org/index.php?search="$search_term
}
